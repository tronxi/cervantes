QMAKE_CXX=$$(CXX)
QMAKE_CC=$$(CC)
QMAKE_LINK=$$(CXX)


# Set output dirs
linux-arm-g++ { # Deployment
    MOC_DIR = ./gen/moc
    OBJECTS_DIR = ./obj
    UI_DIR = ./gen
    RCC_DIR = ./gen
    DESTDIR = ./bin
} else { # Development environment
    MOC_DIR = ./x86-gen/moc
    OBJECTS_DIR = ./x86-obj
    UI_DIR = ./x86-gen
    RCC_DIR = ./x86-gen
    DESTDIR = ./x86-bin
}

# Set Qt tools and path

linux-arm-g++ { # Deployment
    # Set Qt tools and path
    QMAKE_MOC = /usr/bin/moc-qt4
    #QMAKE_UIC = /usr/bin/uic
    QMAKE_RCC = /usr/bin/rcc

    QMAKE_INCDIR_QT = $${QT_DIR}/include
    QMAKE_LIBDIR_QT = $${QT_DIR}/lib
    QMAKE_QT_PLUGINPATH = $${QT_DIR}/plugins/imageformat

    # Add lrelease utility
    lrelease.commands = lrelease -removeidentical ${QMAKE_FILE_NAME} -qm ${QMAKE_FILE_OUT}

} else { # Development environment
    # Set Qt tools and path
    QMAKE_MOC = $${QT_DEV_PATH}/bin/moc
    QMAKE_UIC = $${QT_DEV_PATH}/bin/uic
    QMAKE_RCC = $${QT_DEV_PATH}/bin/rcc
    QMAKE_INCDIR_QT = $${QT_DEV_PATH}/include
    QMAKE_LIBDIR_QT = $${QT_DEV_PATH}/lib

    # Add lrelease utility
    lrelease.commands = $${QT_DEV_PATH}/bin/lrelease -removeidentical ${QMAKE_FILE_NAME} -qm ${QMAKE_FILE_OUT}
}

# Add lrelease utility
lrelease.output  = $${DESTDIR}/langs/${QMAKE_FILE_BASE}.qm
lrelease.input = TR_FILES
lrelease.CONFIG = no_link target_predeps
QMAKE_EXTRA_COMPILERS += lrelease

# Add rcc utility
res.output  = $${DESTDIR}/langs/${QMAKE_FILE_BASE}.rcc
res.commands = $${QMAKE_RCC} -binary ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
res.input = QRC_FILES
res.CONFIG = no_link target_predeps
QMAKE_EXTRA_COMPILERS += res
